// add target="_blank" to external links
var links = document.links;
for (var i = 0, l = links.length; i < l; i++)
{
    if (links[i].hostname != window.location.hostname && !links[i].href.startsWith('javascript:') )
    {
        links[i].target = '_blank';
        links[i].setAttribute('rel', 'noreferrer');
    }
}

// IE11 endsWith polyfill
if (!String.prototype.endsWith) {
	String.prototype.endsWith = function(suffix) {
        return this.indexOf(suffix, this.length - suffix.length) !== -1;
    };
}

// check if session and localStorage are available,
// if not, set a flag and provide a fallback solution via window.getStorage
try {
    window.localStorage;
    window.sessionStorage;
    window._storageDisabled = false; 
}
catch(e) {
    console.log("sessionStorage and/or localStorage not available, falling back to in-memory storage: ", e);

    // store factory to retrieve in-memory session 
    window.getStorage = function() {
        return {
            _items: new Map(),
            setItem(key, val) {
                this._items.set(key, val);
            },
            getItem(key) {
                return this._items.has(key) ? this._items.get(key): null;
            }
        }
    }
    // set flag 
    window._storageDisabled = true; 
}

/* BODY CLASS HANDLING */
var body = document.querySelector('body');
body.classList.remove('no-js');
body.classList.add('javascript');
if ('ontouchstart' in document.documentElement) body.classList.add('is-touch');

/**
* @desc Prefetching internal links on hover
* @version 1.0.0
* @author d.kressler
*/
var Prefetcher = function(params)
{
    defaults = {
        'onHover': true,
        storage: window._storageDisabled ? window.getStorage() : localStorage
    };
    var opt = J.merge(defaults, params);

    var addFetch = function(href) 
    {
        var elm = document.createElement('link');
        elm.rel = "prefetch";
        elm.href = href;
        prefetched.push(href);
        opt.storage.setItem('prefetched', prefetched.toString());
        document.head.appendChild(elm);

        return prefetched;
    };
    var prefetched = opt.storage.getItem('prefetched');
    if(prefetched === null) prefetched = [];
    else prefetched = prefetched.split(',');

    var links = document.querySelectorAll('a[data-prefetch]');
    for(var i = 0; i < links.length; i++) addFetch(links[i].href);

    if(opt.onHover)
    {
        var hLinks = document.querySelectorAll('a[href|="http"]:not([data-prefetch=false])');
        var origin = window.location.origin;
        for(var i = 0; i < hLinks.length; i++)
        {
            hLinks[i].addEventListener('mouseover', function()
            {
                if
                (
                    (
                        this.href.indexOf(origin) > -1 
                        || this.href.indexOf('http') !== 0
                    ) 
                    && prefetched.indexOf(this.href) == -1 
                    && this.href != window.location.href
                    && this.href.endsWith('.jpg') === false
                    && this.href.endsWith('.png') === false
                    && this.href.endsWith('.gif') === false
                ) 
                {
                    addFetch(this.href);
                }
            });
        }
    }
};

/* Replace all a[href^="tel"] by span elements */
function phonelink(){var e=document.querySelectorAll('a[href^="tel:"]'),t=document.querySelectorAll('a[href^="whatsapp://"]');for(i=0;i<e.length;i++){var r=e[i],a=r.className,l=r.innerHTML,n='<span class="'+a+'">'+l+"</span>";r.outerHTML=n}for(i=0;i<t.length;i++){var r=t[i];r.setAttribute("href",r.getAttribute("href").replace("whatsapp://","https://web.whatsapp.com/"))}}

/* REPLACE a[href^="tel"] BY SPAN ELEMENT IF NOT MOBILE DEVICE */
if(!('ontouchstart' in window || navigator.maxTouchPoints) && document.getElementById('log_container') === null) phonelink();

/* MAILMASK */
function maillink() {var maillinks = document.querySelectorAll('a[data-email]');for (i = 0; i < maillinks.length; i++) {var data = JSON.parse(maillinks[i].getAttribute('data-email')),escape = maillinks[i].querySelector('span.escape');maillinks[i].href = "mailto:" + data.name + "@" +data.host;if(escape) escape.outerHTML = '@';}};
maillink();

/*
 * css breakpoints in javascript object
 * https://github.com/ma-zou/breakpoints_from_css/blob/master/script.js
*/
window.breakpoint = function (width, direction) {
    var breakpoints = new Array();
    for(bp in cssData['gridMap']) {
        if(cssData['gridMap'][bp].width === '$rowMaxWidth') breakpoints[bp] = parseInt(cssData['rowMaxWidth'].replace('px', '')) / 16 + 'em';
        else breakpoints[bp] = parseInt(cssData['gridMap'][bp].width.replace('px', '')) / 16 +'em'; 
    }
    direction = (typeof direction === 'undefined') ? 'min' : direction;
    if(typeof width === 'undefined') {
        return breakpoints
    } else {
        if (direction === 'min') return window.matchMedia("(min-width: " + breakpoints[width] + ")").matches;
        else return window.matchMedia("(max-width: " + breakpoints[width].replace(/(\d|\W)*/, function(m) {return parseFloat(m) - 0.0625}) + ")").matches
    }
}
/**
 * @author Dominik Kressler
 * @thanks Eric Holtkamp
 * @date 2020-05-05
 * 
 */
window.currentBp = function() {
    let bp = breakpoint();
    let checkWidth = (window.innerWidth + 1) / parseInt(cssData['base-font-size']);
    let values = Object.values(bp).map(function (x) {return parseFloat(x);});
    values.sort(function(a, b) {return a - b;});
    let result = false;

    for(let i = 0, c = values.length; i < c; i++)
    {
        if(i < values.length-1 && checkWidth >= values[i] && checkWidth <= values[ (i+1) ]) 
        {
            result = values[i];
            break;
        }
    }
    if(result === false) result = values[values.length-1];

    return Object.keys(bp)[Object.values(bp).indexOf(result+'em')];
};

/*
 * new scrollDir(document.body); 
 * Adds a class to an element to indicate the scroll direction
 */
function ScrollDir(elm) 
{
    var lastScrollTop = 0;
    document.addEventListener('scroll', function(e)
    {
        var scrollTop = window.pageYOffset || document.documentElement.scrollTop;
        if (scrollTop > lastScrollTop) 
        {
            elm.classList.add('scrolling-down');
            elm.classList.remove('scrolling-up');
        }
        else if (scrollTop != lastScrollTop)
        {
            elm.classList.remove('scrolling-down');
            elm.classList.add('scrolling-up');
        }
        lastScrollTop = scrollTop <= 0 ? 0 : scrollTop;
    });
}

window.addEventListener('keydown', function(e) {if(e.which == 13 && document.activeElement.getAttribute('tabindex') != null) document.activeElement.click();});

/**
 * @desc J Library with handy helper functions
 * @version 1.0.0
 * @author Dominik Kressler
 * @author Malte Zoudlik
*/
var J = function()
{
    return this
};
J.prototype.mergeDeep = function() 
{ 
    var self = this; 
    Object.keys(arguments).forEach(obj => 
    { 
        Object.keys(self).forEach(val => 
        { 
            if (arguments[obj].hasOwnProperty(val)) { 
                var tmp = arguments[obj][val] instanceof Array ? arguments[obj][val] : [arguments[obj][val]]; 
                self[val] = self[val].concat(tmp); 
            }   
        }); 
    }); 
    return self; 
} 
J.prototype.merge = function(obj1, obj2)
{
    for (var p in obj2) {
        try {
            if ( obj2[p].constructor==Object ) {
                obj1[p] = obj1[p].mergeDeep(obj2[p]);
            } else {
                obj1[p] = obj2[p];
            }
        }
        catch(e) {
            obj1[p] = obj2[p];
        }
    }
    return obj1;
};
J.prototype.isOnScreen = function(node, offset)
{
    if (typeof node != 'object') return true;

    if(typeof offset == 'undefined') offset = 0;

    var bounding = node.getBoundingClientRect();
    var isOnScreen = (
        bounding.top + bounding.height >= 0 
        && bounding.left + bounding.width >= 0 
        && bounding.right - bounding.width <= (window.innerWidth || document.documentElement.clientWidth) 
        && bounding.bottom - bounding.height <= ( (window.innerHeight || document.documentElement.clientHeight) + offset )
    );

    if(isOnScreen) {
        node.classList.add('isOnScreen');
    }
    else node.classList.remove('isOnScreen');

    return isOnScreen;
};
J.prototype.isNodeElement = function(element) {
    return element instanceof Element || element instanceof HTMLDocument; 
};
J.prototype.deepValue = function(obj, path) {
    for (var i=0, path=path.split('.'), len=path.length; i<len; i++){
        if(obj[path[i]] == null || typeof obj[path[i]] == "undefined") obj = '';
        else obj = obj[path[i]];
    };
    return obj;
};
J.prototype.isURL = function(str) {
    var pattern = new RegExp('^(https?:\\/\\/)?'+ // protocol
    '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.?)+[a-z]{2,}|'+ // domain name
    '((\\d{1,3}\\.){3}\\d{1,3}))'+ // OR ip (v4) address
    '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*'+ // port and path
    '(\\?[;&a-z\\d%_.~+=-]*)?'+ // query string
    '(\\#[-a-z\\d_]*)?$','i'); // fragment locator
    return pattern.test(str);
};
J = new J();

if (typeof String.prototype.replaceAll !== "undefined") { 
    String.prototype.replaceAll = function(search, replacement) {
        var target = this;
        return target.replace(new RegExp(search, 'g'), replacement);
    };
}
